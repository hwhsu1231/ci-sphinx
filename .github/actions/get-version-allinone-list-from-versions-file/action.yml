# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-version-allinone-list-from-versions-file

description: Get the Version List from versions.json

inputs:
  type:
    required: true    # [required]
    description: xxx
  version:
    required: true    # [required]
    description: xxx
  version-group:
    required: true    # [required]
    description: xxx
  version-filter:
    required: true    # [required]
    description: >
      Possible values are: 'all', 'gettext', and 'tmscli'.
  versions-file:
    required: false
    default: 'versions.json'
    description: xxx
  working-directory:
    required: false
    default: ${{ github.workspace }}
    description: xxx

outputs:
  VERSION_NUM:
    value: ${{ steps.gvav.outputs.VERSION_NUM }}
    description: xxx
  VERSION_LIST:
    value: ${{ steps.gvav.outputs.VERSION_LIST }}
    description: xxx
  ALLINONE_NUM:
    value: ${{ steps.gvav.outputs.ALLINONE_NUM }}
    description: Number of items in the ALLINONE list.
  ALLINONE_LIST:
    value: ${{ steps.gvav.outputs.ALLINONE_LIST }}
    description: JSON list of ALLINONE values.

runs:
  using: composite
  steps:
    - name: Get VERSION_LIST and ALLINONE_LIST from versions.json
      id: gvav
      shell: bash
      run: |
        TYPE="${{ inputs.type }}"
        VERSION="${{ inputs.version }}"
        VERSION_GROUP="${{ inputs.version-group }}"
        VERSION_FILTER="${{ inputs.version-filter }}"
        VERSIONS_FILE="${{ inputs.versions-file }}"
        WORKING_DIRECTORY=$(echo "${{ inputs.working-directory }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd "${WORKING_DIRECTORY}"

        if [[ "${TYPE}" == "group" ]]; then
          if [[ "${VERSION_GROUP}" == "all" ]]; then
            VERSION_GROUP_FILTER=""
          else
            VERSION_GROUP_FILTER="\"${VERSION_GROUP}\""
          fi
          if [[ "${VERSION_FILTER}" == "all" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(.)] | add"
          elif [[ "${VERSION_FILTER}" == "gettext" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(select(.VERSION_COMPENDIUM != \"\") | .)] | add"
          elif [[ "${VERSION_FILTER}" == "tmscli" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(select(.VERSION_COMPENDIUM == \"\") | .)] | add"
          else
            echo "Error: Invalid VERSION_FILTER value. (${VERSION_FILTER})" >&2
            exit 1
          fi
          JQ_FILE="${VERSIONS_FILE}"
          OBJECT_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          VERSION_LIST=$(echo "${OBJECT_LIST}" | jq -c "[.[].VERSION]")
          ALLINONE_LIST=$(echo "${OBJECT_LIST}" | jq -c "[.[].ALLINONE]")
        elif [[ "${TYPE}" == "single" ]]; then
          if [[ "${VERSION_FILTER}" == "all" ]]; then
            JQ_FILTER="[.[] | map(.)] | add"
          elif [[ "${VERSION_FILTER}" == "gettext" ]]; then
            JQ_FILTER="[.[] | map(select(.VERSION_COMPENDIUM != \"\") | .)] | add"
          elif [[ "${VERSION_FILTER}" == "tmscli" ]]; then
            JQ_FILTER="[.[] | map(select(.VERSION_COMPENDIUM == \"\") | .)] | add"
          else
            echo "Error: Invalid VERSION_FILTER value. (${VERSION_FILTER})" >&2
            exit 1
          fi
          JQ_FILE="${VERSIONS_FILE}"
          OBJECT_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
          VERSION_VALUE=$(echo "${OBJECT_LIST}" | jq -r ".[] | select(.VERSION == \"${VERSION}\") | .VERSION")
          ALLINONE_VALUE=$(echo "${OBJECT_LIST}" | jq -r ".[] | select(.VERSION == \"${VERSION}\") | .ALLINONE")
          if [[ "${VERSION_VALUE}" != "" ]]; then
            echo "VERSION '${VERSION}' is found in the list."
          else
            echo "Error: VERSION '${VERSION}' is NOT found in the list." >&2
            exit 1
          fi
          if [[ "${ALLINONE_VALUE}" == "true" || "${ALLINONE_VALUE}" == "false" ]]; then
            echo "ALLINONE for VERSION '${VERSION}' is: ${ALLINONE_VALUE}"
          else
            echo "Error: ALLINONE for VERSION '${VERSION}' is NOT found in the list." >&2
            exit 1
          fi
          VERSION_LIST="[ \"${VERSION_VALUE}\" ]"
          ALLINONE_LIST="[ \"${ALLINONE_VALUE}\" ]"
        else
          echo "Error: Invalid TYPE value. (${TYPE})" >&2
          exit 1
        fi

        VERSION_NUM=$(jq "length" <<< "${VERSION_LIST}")
        ALLINONE_NUM=$(jq "length" <<< "${ALLINONE_LIST}")

        echo "VERSION_NUM=${VERSION_NUM}" >> ${GITHUB_OUTPUT}
        echo "VERSION_NUM:"
        echo "${VERSION_NUM}"

        echo "VERSION_LIST=${VERSION_LIST}" >> ${GITHUB_OUTPUT}
        echo "VERSION_LIST:"
        echo "${VERSION_LIST}" | jq "."

        echo "ALLINONE_NUM=${ALLINONE_NUM}" >> ${GITHUB_OUTPUT}
        echo "ALLINONE_NUM:"
        echo "${ALLINONE_NUM}"

        echo "ALLINONE_LIST=${ALLINONE_LIST}" >> ${GITHUB_OUTPUT}
        echo "ALLINONE_LIST:"
        echo "${ALLINONE_LIST}" | jq "."
